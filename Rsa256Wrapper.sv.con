module Rsa256Wrapper(
	input avm_rst,
	input avm_clk,
	output [4:0] avm_address,
	output avm_read,
	input [31:0] avm_readdata,
	output avm_write,
	output [31:0] avm_writedata,
	input avm_waitrequest,
  output [3:0] o_num
);
	localparam RX_BASE     = 0*4;
	localparam TX_BASE     = 1*4;
	localparam STATUS_BASE = 2*4;
	localparam TX_OK_BIT = 6;
	localparam RX_OK_BIT = 7;

	localparam S_GET_KEY = 0;
	localparam S_GET_DATA = 1;
	localparam S_WAIT_CALCULATE = 2;
	localparam S_SEND_DATA = 3;

  localparam CON_WORD_NUM = 0; // Con 字號
  localparam ONE_WORD_NUM = 1; // 壹字號

	logic [255:0] n_r, n_w, e_r, e_w, enc_r, enc_w, dec_r, dec_w;
	logic [6:0] bytes_counter_r, bytes_counter_w;
	logic [4:0] avm_address_r, avm_address_w;
	logic avm_read_r, avm_read_w, avm_write_r, avm_write_w;

	logic rsa_start_r, rsa_start_w;
	logic rsa_finished;
	logic [255:0] rsa_dec;

  // logic [2:0] state_r, state_w;
  logic [3:0] counter_r, counter_w;
  logic [3:0] num_w, num_r;

  logic [7:0] write_buffer_r, write_buffer_w;
  logic write_buffer_full_r, write_buffer_full_w;

  assign o_num = num_r;
	assign avm_address = avm_address_r;
	assign avm_read = avm_read_r;
	assign avm_write = avm_write_r;
	assign avm_writedata = dec_r[247-:8];

	Rsa256Core rsa256_core(
		.i_clk(avm_clk),
		.i_rst(avm_rst),
		.i_start(rsa_start_r),
		.i_a(enc_r),
		.i_e(e_r),
		.i_n(n_r),
		.o_a_pow_e(rsa_dec),
		.o_finished(rsa_finished)
	);

	task StartRead;
		input [4:0] addr;
		begin
			avm_read_w = 1;
			avm_write_w = 0;
			avm_address_w = addr;
		end
	endtask
	task StartWrite;
		input [4:0] addr;
		begin
			avm_read_w = 0;
			avm_write_w = 1;
			avm_address_w = addr;
		end
	endtask

  typedef enum { S_START,
                 S_CHECK_RX, S_TO_RECEIVE, S_RECEIVING,
                 S_CALC, 
                 S_CHECK_TX, S_SENDING } State;

  State state_r, state_w;
  localparam NUM_LEN = 32;

  always_comb begin
    // dec_w[247-:8] = dec_r[247-:8];
    dec_w = dec_r
    avm_read_w = avm_read_r;
    avm_write_w = avm_write_r;
    avm_address_w = avm_address_r;
    state_w = state_r;
    counter_w = counter_r;
    bytes_counter_w = bytes_counter_r;
    num_w = counter_r;

    case (state_r)
      S_START: begin
        // Initialize anything
        bytes_counter_w = NUM_LEN - 1;
      end
      S_CHECK_RX: begin
        if (bytes_counter_r) begin
          StartRead(STATUS_BASE);
          state_w = S_TO_RECEIVE;
          bytes_counter_w = bytes_counter_r - 1;
        end else begin
          state_w = S_CALC
        end
      end
      S_TO_RECEIVE: begin
        if (!avm_waitrequest) begin
          if (avm_readdata[RX_OK_BIT]) begin
            StartRead(RX_BASE);
            state_w = S_RECEIVING;
          end else begin
            state_w = S_IDLE;
          end
        end
        
      
    endcase

  end

	always_ff @(posedge avm_clk or posedge avm_rst) begin
		if (avm_rst) begin
			n_r <= 0;
			e_r <= 0;
			enc_r <= 0;
			dec_r <= 0;
			avm_address_r <= STATUS_BASE;
			avm_read_r <= 1;
			avm_write_r <= 0;
			bytes_counter_r <= NUM_LEN-1;
			rsa_start_r <= 0;
      state_r <= S_IDLE;
      counter_r <= 0;
      num_r <= 0;
      write_buffer_r <= 0;
      write_buffer_full_r <= 0;
		end else begin
			n_r <= n_w;
			e_r <= e_w;
			enc_r <= enc_w;
			dec_r <= dec_w;
			avm_address_r <= avm_address_w;
			avm_read_r <= avm_read_w;
      avm_write_r <= avm_write_w;
			bytes_counter_r <= bytes_counter_w;
			rsa_start_r <= rsa_start_w;
      state_r <= state_w;
      counter_r <= counter_w;
      num_r <= num_w;
      write_buffer_r <= write_buffer_w;
      write_buffer_full_r <= write_buffer_full_w;
		end
	end
endmodule
